---
id: "backend-stack"
priority: 850
scope: ["agent"]
when:
  paths: ["backend/**", "api/**", "integrations/**", "services/**", "models/**"]
  languages: ["python"]
---

# 🐍 Flask 3.1 API – Ohmni Backend Canon

* **Runtime**  Python 3.11   (gunicorn 23.0 `-k sync`, app factory `app_minimal:create_app`)
* **Key libs**  Flask 3.1.1 · SQLAlchemy 2.0.41 (+ Flask-SQLAlchemy) · Alembic via Flask-Migrate  
  * AI clients  `openai 1.84` · `anthropic 0.52` · `google-generativeai 0.8.5`  
  * Vector search  `azure-search-documents 11.5.2`
* **Datastores**  PostgreSQL, Redis, Azure Cognitive Search (`construction-knowledge`), local `uploads/`
* **Layout (trimmed)**
backend/api/ backend/services/ backend/utils/
integrations/ models/ migrations/ app_minimal.py

markdown
Copy
Edit
* **Refactor Directives**  
1. Centralise AI client → `backend/ai_clients.py`.  
2. Shared vision prompts → `backend/prompts/shared.py`.  
3. File-ext checks → `backend/utils/file_utils.py`.  
4. One Redis init → `extensions/redis.py`.  
5. Single `@skip_options` decorator.  
6. Anthropic/OpenAI wrappers → `backend/ai_providers/`.  
7. Upload-task logic → `backend/services/upload_service.py`.  
8. Chat-title logic → `backend/services/chat_title.py`.
* **Guard-rails**  
* Never touch `migrations/*`, `requirements*.txt`, `pyproject.toml` without explicit bump.  
* Every model change ships with `alembic revision --autogenerate`.  
* Ban stray `print()` / un-parameterised SQL.
* **Tests**  `pytest -q`